#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <vector>
#include <cmath>
#include <iomanip>
#include <algorithm>

#ifdef _WIN32
#include <windows.h> // –î–ª—è SetConsoleOutputCP
#endif

class ClassLab12_Habur {
private:
    double length;
    double width;
    double height;

public:
    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    ClassLab12_Habur(double l, double w, double h) {
        setLength(l);
        setWidth(w);
        setHeight(h);
    }

    // –ì–µ—Ç—Ç–µ—Ä–∏
    double getLength() const { return length; }
    double getWidth() const { return width; }
    double getHeight() const { return height; }

    // –°–µ—Ç—Ç–µ—Ä–∏ –∑ –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é
    void setLength(double l) {
        if (l <= 0) throw std::invalid_argument("–î–æ–≤–∂–∏–Ω–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω–æ—é!");
        length = l;
    }

    void setWidth(double w) {
        if (w <= 0) throw std::invalid_argument("–®–∏—Ä–∏–Ω–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω–æ—é!");
        width = w;
    }

    void setHeight(double h) {
        if (h <= 0) throw std::invalid_argument("–í–∏—Å–æ—Ç–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω–æ—é!");
        height = h;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–ª–æ—â—ñ –ø–æ–≤–µ—Ä—Ö–Ω—ñ
    double getSurfaceArea() const {
        double area = 2 * (length * width + length * height + width * height);
        std::cout << "–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–ª–æ—â—ñ: area = " << area << "\n";
        return area;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –¥—ñ–∞–≥–æ–Ω–∞–ª—ñ –µ–∫—Ä–∞–Ω—É –≤ –¥—é–π–º–∞—Ö
    double getScreenDiagonalInches() const {
        double diagonal_cm = sqrt(pow(length, 2) + pow(width, 2));
        double diagonal_inches = diagonal_cm / 2.54;
        std::cout << "–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥—ñ–∞–≥–æ–Ω–∞–ª—ñ: diagonal_cm = " << diagonal_cm << ", diagonal_inches = " << diagonal_inches << "\n";
        return diagonal_inches;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó —É –≤–∏–≥–ª—è–¥—ñ —Ä—è–¥–∫–∞
    std::string getInfo() const {
        std::ostringstream oss;
        oss << std::fixed << std::setprecision(2);
        oss << "üì± –†–æ–∑–º—ñ—Ä–∏ –ø–ª–∞–Ω—à–µ—Ç–∞:\n";
        oss << " ‚ñ∏ –î–æ–≤–∂–∏–Ω–∞: " << length << " —Å–º\n";
        oss << " ‚ñ∏ –®–∏—Ä–∏–Ω–∞:  " << width << " —Å–º\n";
        oss << " ‚ñ∏ –í–∏—Å–æ—Ç–∞:  " << height << " —Å–º\n";
        oss << "üìè –î—é–π–º–æ–≤–∫–∞ –µ–∫—Ä–∞–Ω—É: " << getScreenDiagonalInches() << " –¥—é–π–º—ñ–≤\n";
        oss << "üìê –ü–ª–æ—â–∞ –ø–æ–≤–µ—Ä—Ö–Ω—ñ: " << getSurfaceArea() << " —Å–º¬≤";
        return oss.str();
    }
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ä—è–¥–∫—ñ–≤ –∑ –¥–æ–ø—É—Å–∫–æ–º –¥–ª—è —á–∏—Å–µ–ª –∑ –ø–ª–∞–≤–∞—é—á–æ—é —Ç–æ—á–∫–æ—é
bool compareWithTolerance(const std::string &actual, const std::string &expected) {
    std::istringstream issActual(actual);
    std::istringstream issExpected(expected);

    std::string lineActual, lineExpected;
    int lineNum = 0;
    while (std::getline(issActual, lineActual) && std::getline(issExpected, lineExpected)) {
        lineNum++;

        // –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–æ–±—ñ–ª–∏ –∑ –ø–æ—á–∞—Ç–∫—É —ñ –∫—ñ–Ω—Ü—è —Ä—è–¥–∫–∞
        lineActual.erase(0, lineActual.find_first_not_of(" \t\n\r"));
        lineActual.erase(lineActual.find_last_not_of(" \t\n\r") + 1);
        lineExpected.erase(0, lineExpected.find_first_not_of(" \t\n\r"));
        lineExpected.erase(lineExpected.find_last_not_of(" \t\n\r") + 1);

        // –Ø–∫—â–æ —Ä—è–¥–∫–∏ –ø–æ—Ä–æ–∂–Ω—ñ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —ó—Ö
        if (lineActual.empty() && lineExpected.empty()) {
            continue;
        }

        // –Ø–∫—â–æ –æ–¥–∏–Ω –∑ —Ä—è–¥–∫—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π, –∞ —ñ–Ω—à–∏–π –Ω—ñ, —Ç–æ –≤–æ–Ω–∏ —Ä—ñ–∑–Ω—ñ
        if (lineActual.empty() || lineExpected.empty()) {
            return false;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ä—è–¥–∫–∏ —ñ–¥–µ–Ω—Ç–∏—á–Ω—ñ
        if (lineActual == lineExpected) {
            continue;
        }

        // –Ø–∫—â–æ —Ä—è–¥–∫–∏ –Ω–µ —ñ–¥–µ–Ω—Ç–∏—á–Ω—ñ, —Ç–æ —à—É–∫–∞—î–º–æ —á–∏—Å–ª–∞ –≤ –Ω–∏—Ö
        try {
            std::vector<double> numsActual, numsExpected;

            // –í–∏—Ç—è–≥—É—î–º–æ –≤—Å—ñ —á–∏—Å–ª–∞ –∑ —Ä—è–¥–∫–∞ lineActual
            size_t posActual = 0;
            while (posActual < lineActual.size()) {
                if (isdigit(lineActual[posActual]) || lineActual[posActual] == '.' || lineActual[posActual] == '-') {
                    size_t start = posActual;
                    while (posActual < lineActual.size() &&
                           (isdigit(lineActual[posActual]) || lineActual[posActual] == '.' || lineActual[posActual] == '-')) {
                        posActual++;
                    }
                    std::string numStr = lineActual.substr(start, posActual - start);
                    try {
                        double num = std::stod(numStr);
                        numsActual.push_back(num);
                    } catch (...) {
                        // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –≤ —á–∏—Å–ª–æ, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –ø–æ—à—É–∫
                    }
                } else {
                    posActual++;
                }
            }

            // –í–∏—Ç—è–≥—É—î–º–æ –≤—Å—ñ —á–∏—Å–ª–∞ –∑ —Ä—è–¥–∫–∞ lineExpected
            size_t posExpected = 0;
            while (posExpected < lineExpected.size()) {
                if (isdigit(lineExpected[posExpected]) || lineExpected[posExpected] == '.' || lineExpected[posExpected] == '-') {
                    size_t start = posExpected;
                    while (posExpected < lineExpected.size() &&
                           (isdigit(lineExpected[posExpected]) || lineExpected[posExpected] == '.' || lineExpected[posExpected] == '-')) {
                        posExpected++;
                    }
                    std::string numStr = lineExpected.substr(start, posExpected - start);
                    try {
                        double num = std::stod(numStr);
                        numsExpected.push_back(num);
                    } catch (...) {
                        // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –≤ —á–∏—Å–ª–æ, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –ø–æ—à—É–∫
                    }
                } else {
                    posExpected++;
                }
            }

            // –Ø–∫—â–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —á–∏—Å–µ–ª –≤ —Ä—è–¥–∫–∞—Ö –Ω–µ –∑–±—ñ–≥–∞—î—Ç—å—Å—è, —Ç–æ —Ä—è–¥–∫–∏ —Ä—ñ–∑–Ω—ñ
            if (numsActual.size() != numsExpected.size()) {
                return false;
            }

            // –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ —á–∏—Å–ª–∞ –∑ –¥–æ–ø—É—Å–∫–æ–º
            bool numsMatch = true;
            for (size_t i = 0; i < numsActual.size(); ++i) {
                if (std::abs(numsActual[i] - numsExpected[i]) > 0.01) {
                    numsMatch = false;
                    break;
                }
            }

            if (numsMatch) {
                // –Ø–∫—â–æ —á–∏—Å–ª–∞ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å, —Ç–æ –ø–æ—Ä—ñ–≤–Ω—é—î–º–æ —Ä—è–¥–∫–∏ –±–µ–∑ —á–∏—Å–µ–ª
                std::string nonNumActual = lineActual;
                std::string nonNumExpected = lineExpected;

                // –ó–∞–º—ñ–Ω—é—î–º–æ —á–∏—Å–ª–∞ –≤ —Ä—è–¥–∫–∞—Ö –Ω–∞ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫
                posActual = 0;
                while (posActual < nonNumActual.size()) {
                    if (isdigit(nonNumActual[posActual]) || nonNumActual[posActual] == '.' || nonNumActual[posActual] == '-') {
                        size_t start = posActual;
                        while (posActual < nonNumActual.size() &&
                               (isdigit(nonNumActual[posActual]) || nonNumActual[posActual] == '.' || nonNumActual[posActual] == '-')) {
                            posActual++;
                        }
                        nonNumActual.replace(start, posActual - start, "");
                    } else {
                        posActual++;
                    }
                }

                posExpected = 0;
                while (posExpected < nonNumExpected.size()) {
                    if (isdigit(nonNumExpected[posExpected]) || nonNumExpected[posExpected] == '.' || nonNumExpected[posExpected] == '-') {
                        size_t start = posExpected;
                        while (posExpected < nonNumExpected.size() &&
                               (isdigit(nonNumExpected[posExpected]) || nonNumExpected[posExpected] == '.' || nonNumExpected[posExpected] == '-')) {
                            posExpected++;
                        }
                        nonNumExpected.replace(start, posExpected - start, "");
                    } else {
                        posExpected++;
                    }
                }

                // –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏
                nonNumActual.erase(std::unique(nonNumActual.begin(), nonNumActual.end(),
                                     [](char a, char b) { return a == ' ' && b == ' '; }), nonNumActual.end());
                nonNumExpected.erase(std::unique(nonNumExpected.begin(), nonNumExpected.end(),
                                     [](char a, char b) { return a == ' ' && b == ' '; }), nonNumExpected.end());

                // –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ —Ä—è–¥–∫–∏ –±–µ–∑ —á–∏—Å–µ–ª
                if (nonNumActual != nonNumExpected) {
                    return false;
                }

                continue;
            } else {
                // –Ø–∫—â–æ —á–∏—Å–ª–∞ —Ä—ñ–∑–Ω—è—Ç—å—Å—è –±—ñ–ª—å—à–µ –Ω—ñ–∂ –Ω–∞ 0.01, —Ä—è–¥–∫–∏ –≤–≤–∞–∂–∞—é—Ç—å—Å—è —Ä—ñ–∑–Ω–∏–º–∏
                return false;
            }
        } catch (...) {
            // –Ø–∫—â–æ –Ω–µ —á–∏—Å–ª–∞ - –ø–æ—Ä—ñ–≤–Ω—é—î–º–æ —è–∫ —Ä—è–¥–∫–∏
            return false;
        }
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –∑–∞–ª–∏—à–∏–ª–æ—Å—è –Ω–µ–ø–æ—Ä—ñ–≤–Ω—è–Ω–∏—Ö —Ä—è–¥–∫—ñ–≤
    if (std::getline(issActual, lineActual) || std::getline(issExpected, lineExpected)) {
        return false;
    }

    return true;
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Ç–µ—Å—Ç—É
struct TestResult {
    int testNumber;
    bool passed;
    std::string expectedOutput;
    std::string actualOutput;
};

int main() {
#ifdef _WIN32
    SetConsoleOutputCP(65001); // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è UTF-8 –≤–∏–≤–æ–¥—É –≤ Windows
#endif

    // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ —Ñ–∞–π–ª –∑ —Ç–µ—Å—Ç–∞–º–∏
    std::ifstream testFile("tests.txt");
    if (!testFile.is_open()) {
        std::cerr << "–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ —Ñ–∞–π–ª tests.txt\n";
        return 1;
    }

    // –ß–∏—Ç–∞—î–º–æ –≤–µ—Å—å —Ñ–∞–π–ª –≤ –ø–∞–º'—è—Ç—å
    std::stringstream buffer;
    buffer << testFile.rdbuf();
    std::string fileContent = buffer.str();
    testFile.close();

    // –†–æ–∑–¥—ñ–ª—è—î–º–æ —Ñ–∞–π–ª –Ω–∞ –æ–∫—Ä–µ–º—ñ —Ç–µ—Å—Ç–∏
    std::vector<std::string> testCases;
    size_t pos = 0;
    while (pos < fileContent.length()) {
        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ—á–∞—Ç–æ–∫ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ç–µ—Å—Ç—É
        size_t testStart = fileContent.find_first_not_of("\n\r", pos);
        if (testStart == std::string::npos) break;

        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫—ñ–Ω–µ—Ü—å –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç—É (–Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ç–µ—Å—Ç –∞–±–æ –∫—ñ–Ω–µ—Ü—å —Ñ–∞–π–ª—É)
        size_t testEnd = fileContent.find("\n\n", testStart);
        if (testEnd == std::string::npos) testEnd = fileContent.length();

        // –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç —Ç–µ—Å—Ç—É
        std::string testStr = fileContent.substr(testStart, testEnd - testStart);
        testCases.push_back(testStr);

        pos = testEnd + 2; // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –¥–≤–∞ —Å–∏–º–≤–æ–ª–∏ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞
    }

    // –í–∏–∫–æ–Ω—É—î–º–æ –∫–æ–∂–µ–Ω —Ç–µ—Å—Ç —ñ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    std::vector<TestResult> results;
    int passedTests = 0;
    int totalTests = testCases.size();

    if (totalTests == 0) {
        std::cout << "–£ —Ñ–∞–π–ª—ñ tests.txt –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç—É.\n";
        return 0;
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç –ø–ª–∞–Ω—à–µ—Ç–∞ –∑ –ø–æ—á–∞—Ç–∫–æ–≤–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏
    ClassLab12_Habur tablet(24.5, 15.3, 0.8);

    // –í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç–µ—Å—Ç—ñ–≤ —ñ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    for (size_t i = 0; i < testCases.size(); i++) {
        const auto& testCase = testCases[i];
        std::istringstream iss(testCase);

        // –ß–∏—Ç–∞—î–º–æ –ø–µ—Ä—à–∏–π —Ä—è–¥–æ–∫ —Ç–µ—Å—Ç—É (–∑–∞–≥–æ–ª–æ–≤–æ–∫)
        std::string testHeader;
        std::getline(iss, testHeader);

        // –ü–∞—Ä—Å–∏–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ—Å—Ç—É
        size_t dot1 = testHeader.find('.');
        if (dot1 == std::string::npos) continue;

        size_t dot2 = testHeader.find('.', dot1 + 1);
        if (dot2 == std::string::npos) dot2 = testHeader.length();

        size_t space = testHeader.find(' ', dot2 + 1);
        if (space == std::string::npos) space = testHeader.length();

        int testNum = 0;
        int menuOption = 0;
        double inputValue = 0.0;

        try {
            testNum = std::stoi(testHeader.substr(0, dot1));
            menuOption = std::stoi(testHeader.substr(dot1 + 1, dot2 - dot1 - 1));

            // –í–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –≤—Ö—ñ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è
            size_t startNum = testHeader.find_first_not_of(" ", dot2 + 1);
            if (startNum != std::string::npos) {
                size_t endNum = testHeader.find_first_of(" ", startNum);
                if (endNum == std::string::npos) endNum = testHeader.length();
                std::string numStr = testHeader.substr(startNum, endNum - startNum);
                if (!numStr.empty()) {
                    inputValue = std::stod(numStr);
                }
            }
            std::cout << "–ó–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è —Ç–µ—Å—Ç—É " << i+1 << ": menuOption=" << menuOption << ", inputValue=" << inputValue << "\n";
        } catch (...) {
            std::cout << "–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ—Å—Ç—É " << i+1 << "\n";
            continue;
        }

        // –ß–∏—Ç–∞—î–º–æ –æ—á—ñ–∫—É–≤–∞–Ω–∏–π –≤–∏–≤—ñ–¥ (–≤—Å–µ, —â–æ –∑–∞–ª–∏—à–∏–ª–æ—Å—è)
        std::string expectedOutput;
        std::string line;
        bool firstLine = true;
        while (std::getline(iss, line)) {
            if (firstLine) {
                // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫ –ø—ñ—Å–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
                if (line.empty()) {
                    firstLine = false;
                    continue;
                }
            }
            if (!line.empty()) {
                expectedOutput += line + "\n";
            }
        }
        if (!expectedOutput.empty()) {
            expectedOutput.pop_back(); // –í–∏–¥–∞–ª—è—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Å–∏–º–≤–æ–ª –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞
        }

        // –í–∏–≤—ñ–¥ –¥–ª—è –¥–µ–±–∞–≥—É
        std::cout << "–û–±—Ä–æ–±–ª—è—î–º–æ —Ç–µ—Å—Ç " << i+1 << ": " << testHeader << "\n";
        std::cout << "–û—á—ñ–∫—É–≤–∞–Ω–∏–π –≤–∏–≤—ñ–¥ –¥–ª—è —Ç–µ—Å—Ç—É " << i+1 << ":\n" << expectedOutput << "\n";

        // –í–∏–∫–æ–Ω—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –¥—ñ—é
        std::string actualOutput;
        try {
            switch (menuOption) {
                case 1: { // –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–ª–∞–Ω—à–µ—Ç
                    actualOutput = tablet.getInfo();
                    break;
                }
                case 2: { // –ó–º—ñ–Ω–∏—Ç–∏ –¥–æ–≤–∂–∏–Ω—É
                    try {
                        tablet.setLength(inputValue);
                        actualOutput = "‚úÖ –î–æ–≤–∂–∏–Ω—É –∑–º—ñ–Ω–µ–Ω–æ.\n";
                        // –í–∏–≤—ñ–¥ —Å—Ç–∞–Ω—É –æ–±'—î–∫—Ç–∞ –¥–ª—è –¥–µ–±–∞–≥—É
                        std::cout << "–ü—ñ—Å–ª—è –∑–º—ñ–Ω–∏ –¥–æ–≤–∂–∏–Ω–∏ (—Ç–µ—Å—Ç " << i+1 << "): " << tablet.getInfo() << "\n";
                    } catch (const std::exception& ex) {
                        actualOutput = "üö´ –ü–æ–º–∏–ª–∫–∞: " + std::string(ex.what()) + "\n";
                        std::cout << "–í–∏–Ω—è—Ç–æ–∫ –≤ —Ç–µ—Å—Ç—ñ " << i+1 << ": " << ex.what() << "\n";
                    }
                    break;
                }
                case 3: { // –ó–º—ñ–Ω–∏—Ç–∏ —à–∏—Ä–∏–Ω—É
                    try {
                        tablet.setWidth(inputValue);
                        actualOutput = "‚úÖ –®–∏—Ä–∏–Ω—É –∑–º—ñ–Ω–µ–Ω–æ.\n";
                        // –í–∏–≤—ñ–¥ —Å—Ç–∞–Ω—É –æ–±'—î–∫—Ç–∞ –¥–ª—è –¥–µ–±–∞–≥—É
                        std::cout << "–ü—ñ—Å–ª—è –∑–º—ñ–Ω–∏ —à–∏—Ä–∏–Ω–∏ (—Ç–µ—Å—Ç " << i+1 << "): " << tablet.getInfo() << "\n";
                    } catch (const std::exception& ex) {
                        actualOutput = "üö´ –ü–æ–º–∏–ª–∫–∞: " + std::string(ex.what()) + "\n";
                        std::cout << "–í–∏–Ω—è—Ç–æ–∫ –≤ —Ç–µ—Å—Ç—ñ " << i+1 << ": " << ex.what() << "\n";
                    }
                    break;
                }
                case 4: { // –ó–º—ñ–Ω–∏—Ç–∏ –≤–∏—Å–æ—Ç—É
                    try {
                        tablet.setHeight(inputValue);
                        actualOutput = "‚úÖ –í–∏—Å–æ—Ç—É –∑–º—ñ–Ω–µ–Ω–æ.\n";
                        // –í–∏–≤—ñ–¥ —Å—Ç–∞–Ω—É –æ–±'—î–∫—Ç–∞ –¥–ª—è –¥–µ–±–∞–≥—É
                        std::cout << "–ü—ñ—Å–ª—è –∑–º—ñ–Ω–∏ –≤–∏—Å–æ—Ç–∏ (—Ç–µ—Å—Ç " << i+1 << "): " << tablet.getInfo() << "\n";
                    } catch (const std::exception& ex) {
                        actualOutput = "üö´ –ü–æ–º–∏–ª–∫–∞: " + std::string(ex.what()) + "\n";
                        std::cout << "–í–∏–Ω—è—Ç–æ–∫ –≤ —Ç–µ—Å—Ç—ñ " << i+1 << ": " << ex.what() << "\n";
                    }
                    break;
                }
                case 5: { // –í–∏–π—Ç–∏
                    actualOutput = "–ü—Ä–æ–≥—Ä–∞–º—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ...\n";
                    break;
                }
                default: {
                    actualOutput = "–ù–µ–≤—ñ–¥–æ–º–∞ –æ–ø—Ü—ñ—è –º–µ–Ω—é: " + std::to_string(menuOption);
                }
            }
        } catch (const std::exception& ex) {
            actualOutput = "üö´ –ü–æ–º–∏–ª–∫–∞: " + std::string(ex.what()) + "\n";
            std::cout << "–í–∏–Ω—è—Ç–æ–∫ –≤ —Ç–µ—Å—Ç—ñ " << i+1 << ": " << ex.what() << "\n";
        }

        // –í–∏–≤—ñ–¥ –¥–ª—è –¥–µ–±–∞–≥—É
        std::cout << "–§–∞–∫—Ç–∏—á–Ω–∏–π –≤–∏–≤—ñ–¥ –¥–ª—è —Ç–µ—Å—Ç—É " << i+1 << ":\n" << actualOutput << "\n";

        // –Ø–∫—â–æ –º–∏ –Ω–µ –æ—Ç—Ä–∏–º–∞–ª–∏ –≤–∏–≤—ñ–¥ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –¥–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –∑–º—ñ–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤),
        // —Ç–æ –≥–µ–Ω–µ—Ä—É—î–º–æ –≤–∏–≤—ñ–¥, —è–∫–∏–π –±—É–¥–µ –ø–æ—Ä—ñ–≤–Ω—é–≤–∞—Ç–∏—Å—è –∑ –æ—á—ñ–∫—É–≤–∞–Ω–∏–º
        if (actualOutput.empty() && menuOption == 1) {
            // –¶–µ –≤–∂–µ –∑—Ä–æ–±–ª–µ–Ω–æ –≤–∏—â–µ
        } else if (actualOutput.empty()) {
            // –î–ª—è –æ–ø—Ü—ñ–π 2-4, —è–∫—â–æ –Ω–µ –±—É–ª–æ –≤–∏–Ω—è—Ç–∫—É, –≥–µ–Ω–µ—Ä—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
            if (menuOption >= 2 && menuOption <= 4) {
                if (inputValue <= 0) {
                    // –Ø–∫—â–æ –≤—Ö—ñ–¥–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ–¥–æ–¥–∞—Ç–Ω–µ, –∞ –º–∏ –Ω–µ –æ—Ç—Ä–∏–º–∞–ª–∏ –ø–æ–º–∏–ª–∫—É - —Ü–µ –ø–æ–º–∏–ª–∫–∞
                    actualOutput = "–ü–æ–º–∏–ª–∫–∞ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏–Ω—è—Ç–∫—É –¥–ª—è –Ω–µ–¥–æ–¥–∞—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è\n";
                } else {
                    // –Ø–∫—â–æ –≤—Ö—ñ–¥–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–Ω–µ, –æ—á—ñ–∫—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
                    if (menuOption == 2) {
                        actualOutput = "‚úÖ –î–æ–≤–∂–∏–Ω—É –∑–º—ñ–Ω–µ–Ω–æ.\n";
                    } else if (menuOption == 3) {
                        actualOutput = "‚úÖ –®–∏—Ä–∏–Ω—É –∑–º—ñ–Ω–µ–Ω–æ.\n";
                    } else if (menuOption == 4) {
                        actualOutput = "‚úÖ –í–∏—Å–æ—Ç—É –∑–º—ñ–Ω–µ–Ω–æ.\n";
                    }
                }
            }
        }

        // –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ –æ—á—ñ–∫—É–≤–∞–Ω–∏–π —ñ —Ñ–∞–∫—Ç–∏—á–Ω–∏–π –≤–∏–≤—ñ–¥
        bool passed = false;
        if (menuOption == 1) {
            // –î–ª—è –æ–ø—Ü—ñ—ó 1 –ø–æ—Ä—ñ–≤–Ω—é—î–º–æ –≤–µ—Å—å –≤–∏–≤—ñ–¥
            passed = compareWithTolerance(actualOutput, expectedOutput);
        } else {
            // –î–ª—è —ñ–Ω—à–∏—Ö –æ–ø—Ü—ñ–π –ø–æ—Ä—ñ–≤–Ω—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            std::string normalizedActual = actualOutput;
            std::string normalizedExpected = expectedOutput;

            // –Ø–∫—â–æ –æ—á—ñ–∫—É—î—Ç—å—Å—è –ø–æ–º–∏–ª–∫–∞ (–≤—Ö—ñ–¥–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è <= 0)
            if (inputValue <= 0 && menuOption >= 2 && menuOption <= 4) {
                if (normalizedActual.find("–ü–æ–º–∏–ª–∫–∞:") != std::string::npos ||
                    normalizedActual.find("üö´ –ü–æ–º–∏–ª–∫–∞:") != std::string::npos) {
                    passed = true;
                }
            } else {
                // –Ø–∫—â–æ –æ—á—ñ–∫—É—î—Ç—å—Å—è —É—Å–ø—ñ—à–Ω–µ –≤–∏–≤–µ–¥–µ–Ω–Ω—è
                // –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –ø—Ä–æ–±—ñ–ª–∏ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
                normalizedActual.erase(std::remove(normalizedActual.begin(), normalizedActual.end(), ' '), normalizedActual.end());
                normalizedExpected.erase(std::remove(normalizedExpected.begin(), normalizedExpected.end(), ' '), normalizedExpected.end());

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º—ñ—Å—Ç–∏—Ç—å —Ñ–∞–∫—Ç–∏—á–Ω–∏–π –≤–∏–≤—ñ–¥ –æ—á—ñ–∫—É–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç
                if (normalizedExpected.find("‚úÖ") != std::string::npos) {
                    // –û—á—ñ–∫—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
                    passed = (normalizedActual.find("‚úÖ") != std::string::npos);
                } else {
                    // –û—á—ñ–∫—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
                    passed = (normalizedActual.find("–ü–æ–º–∏–ª–∫–∞:") != std::string::npos ||
                             normalizedActual.find("üö´") != std::string::npos);
                }
            }
        }

        // –í–∏–≤—ñ–¥ –¥–ª—è –¥–µ–±–∞–≥—É
        std::cout << "–¢–µ—Å—Ç " << i+1 << ": " << (passed ? "–£—Å–ø—ñ—Ö" : "–ù–µ–≤–¥–∞—á–∞") << "\n";
        std::cout << "----------------------------\n";

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç—É
        results.push_back({static_cast<int>(i+1), passed, expectedOutput, actualOutput});
        if (passed) passedTests++;
    }

    // –í–∏–≤–æ–¥–∏–º–æ –∫–æ—Ä–æ—Ç–∫–∏–π –∑–≤—ñ—Ç –ø—Ä–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤—Å—ñ—Ö —Ç–µ—Å—Ç—ñ–≤
    std::cout << "–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—ñ–≤:\n";
    for (const auto& result : results) {
        std::cout << result.testNumber << ". " << (result.passed ? "–£—Å–ø—ñ—Ö" : "–ù–µ–≤–¥–∞—á–∞") << "\n";
    }

    // –í–∏–≤–æ–¥–∏–º–æ –∑–∞–≥–∞–ª—å–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    std::cout << "\n–ó–∞–≥–∞–ª—å–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏:\n";
    std::cout << "–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç—ñ–≤: " << passedTests << " –∑ " << totalTests << "\n";
    std::cout << "–í—ñ–¥—Å–æ—Ç–æ–∫ —É—Å–ø—ñ—à–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤: " << (100.0 * passedTests / totalTests) << "%\n";

    // –í–∏–≤–æ–¥–∏–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –Ω–µ–≤–¥–∞–ª—ñ —Ç–µ—Å—Ç–∏
    std::cout << "\n–î–µ—Ç–∞–ª—ñ –Ω–µ–≤–¥–∞–ª–∏—Ö —Ç–µ—Å—Ç—ñ–≤:\n";
    for (const auto& result : results) {
        if (!result.passed) {
            std::cout << "–¢–µ—Å—Ç " << result.testNumber << ":\n";
            std::cout << "–û—á—ñ–∫—É–≤–∞–ª–æ—Å—è:\n" << result.expectedOutput << "\n";
            std::cout << "–û—Ç—Ä–∏–º–∞–Ω–æ:\n" << result.actualOutput << "\n";
            std::cout << "----------------------------\n";
        }
    }

    system("pause");

    return 0;
}
