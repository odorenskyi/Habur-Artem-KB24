#include <iostream>
#include <windows.h>
#include <limits> // –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –¥–ª—è ignore()
#include "Modules/Gabur.h"
#include "Modules/Gabur.cpp"
#include "9_1.cpp"
#include "9_2.cpp"
#include "9_3.cpp"

using namespace std;

void task9_4() {
    double x, y, z;
    char a, b;

    cout << "\n–í–≤–µ–¥—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è x, y, z (—á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª): ";
    cin >> x >> y >> z;

    cout << "–í–≤–µ–¥—ñ—Ç—å –¥–≤–∞ –ª–æ–≥—ñ—á–Ω—ñ —Å–∏–º–≤–æ–ª–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 1 0): ";
    cin >> a >> b;

    printAuthor();
    printValues(x, y, z);

    double s = calculateS(x, y, z);
    cout << "–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—á–∏—Å–ª–µ–Ω–Ω—è S: " << s << endl;

    printLogicalResult(a, b);
}

int main() {
    SetConsoleOutputCP(65001); // —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞ –≤ –∫–æ–Ω—Å–æ–ª—ñ

    char –∫–æ–º–∞–Ω–¥–Ω–∏–π–°–∏–º–≤–æ–ª;

    while (true) {
        cout << "\n–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É (u-–∑–∞–≤–¥–∞–Ω–Ω—è 4,o-–±–∞–ª –±–æ—Ñ–æ—Ä–¥–∞,p-—Ä–æ–∑–º—ñ—Ä –Ω–æ—Å–∫–∞,a-–¥–≤—ñ–π–∫–æ–≤—ñ —á–∏—Å–ª–∞): ";
        cin >> –∫–æ–º–∞–Ω–¥–Ω–∏–π–°–∏–º–≤–æ–ª;
        cin.ignore(numeric_limits<streamsize>::max(), '\n'); // üîß –æ—á–∏—â–∞—î–º–æ –±—É—Ñ–µ—Ä

        switch (–∫–æ–º–∞–Ω–¥–Ω–∏–π–°–∏–º–≤–æ–ª) {
            case 'u': task9_4(); break;
            case 'o': task1(); break;
            case 'p': task2(); break;
            case 'a': task3(); break;
            default:
                cout << "\a–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞! (—ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–æ)" << endl;
                continue;
        }

        char –≤–∏—Ö—ñ–¥;
        cout <<"\n–î–ª—è –≤–∏—Ö–æ–¥—É –≤–≤–µ–¥—ñ—Ç—å 's' –∞–±–æ 'S',–∞–±–æ";
        cout << "\n–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É (u-–∑–∞–≤–¥–∞–Ω–Ω—è 4,o-–±–∞–ª –±–æ—Ñ–æ—Ä–¥–∞,p-—Ä–æ–∑–º—ñ—Ä –Ω–æ—Å–∫–∞,a-–¥–≤—ñ–π–∫–æ–≤—ñ —á–∏—Å–ª–∞): "; 
        cin >> –≤–∏—Ö—ñ–¥;
        cin.ignore(numeric_limits<streamsize>::max(), '\n'); // üîß –∑–Ω–æ–≤—É –æ—á–∏—â–∞—î–º–æ –±—É—Ñ–µ—Ä

        if (–≤–∏—Ö—ñ–¥ == 's' || –≤–∏—Ö—ñ–¥ == 'S') {
            cout << "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏." << endl;
            break;
        }
    }

    return 0;
}
